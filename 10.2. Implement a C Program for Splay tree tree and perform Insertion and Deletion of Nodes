#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the splay tree
struct Node {
    int key;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int key) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->key = key;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to perform a right rotation
struct Node* rightRotate(struct Node* x) {
    struct Node* y = x->left;
    x->left = y->right;
    y->right = x;
    return y;
}

// Function to perform a left rotation
struct Node* leftRotate(struct Node* x) {
    struct Node* y = x->right;
    x->right = y->left;
    y->left = x;
    return y;
}

// Function to perform a splay operation
struct Node* splay(struct Node* root, int key) {
    if (root == NULL || root->key == key) {
        return root;
    }

    if (root->key > key) {
        if (root->left == NULL) {
            return root;
        }
        if (root->left->key > key) {
            root->left->left = splay(root->left->left, key);
            root = rightRotate(root);
        }
        else if (root->left->key < key) {
            root->left->right = splay(root->left->right, key);
            if (root->left->right != NULL) {
                root->left = leftRotate(root->left);
            }
        }
        return (root->left == NULL) ? root : rightRotate(root);
    }
    else {
        if (root->right == NULL) {
            return root;
        }
        if (root->right->key > key) {
            root->right->left = splay(root->right->left, key);
            if (root->right->left != NULL) {
                root->right = rightRotate(root->right);
            }
        }
        else if (root->right->key < key) {
            root->right->right = splay(root->right->right, key);
            root = leftRotate(root);
        }
        return (root->right == NULL) ? root : leftRotate(root);
    }
}

// Function to insert a node into the splay tree
struct Node* insert(struct Node* root, int key) {
    if (root == NULL) {
        return createNode(key);
    }
    root = splay(root, key);
    if (root->key == key) {
        return root;
    }
    struct Node* newNode = createNode(key);
    if (root->key > key) {
        newNode->right = root;
        newNode->left = root->left;
        root->left = NULL;
    }
    else {
        newNode->left = root;
        newNode->right = root->right;
        root->right = NULL;
    }
    return newNode;
}

// Function to delete a node from the splay tree
struct Node* deleteNode(struct Node* root, int key) {
    if (root == NULL) {
        return root;
    }
    root = splay(root, key);
    if (root->key != key) {
        return root;
    }
    struct Node* temp;
    if (root->left == NULL) {
        temp = root;
        root = root->right;
    }
    else {
        temp = root;
        root = splay(root->left, key);
        root->right = temp->right;
    }
    free(temp);
    return root;
}

// Function to print the splay tree in inorder traversal
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}

// Driver code
int main() {
	printf("senthamizzhselvan\n192321143\n");
    struct Node* root = NULL;
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 40);
    root = insert(root, 50);

    printf("Splay Tree: ");
    inorder(root);
    printf("\n");

    root = deleteNode(root, 30);
    root = deleteNode(root, 40);

    printf("Splay Tree after deletion: ");
    inorder(root);
    printf("\n");

    return 0;
}
